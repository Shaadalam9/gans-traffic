import argparse


def parse_arguments():
    parser = argparse.ArgumentParser(description='Training script')
    parser.add_argument('--dataroot', type=str, default='data/train', required=True, help='Path to data')
    parser.add_argument('--model', type=str, default='unsup_single', help='Model type')
    parser.add_argument('--dataset_mode', type=str, default='unaligned_scale', help='Dataset mode')
    parser.add_argument('--name', type=str, default='v2c_experiment', help='Experiment name')
    parser.add_argument('--loadSizeW', type=int, default=542, help='Load size width')
    parser.add_argument('--loadSizeH', type=int, default=286, help='Load size height')
    parser.add_argument('--resize_mode', type=str, default='rectangle', help='Resize mode')
    parser.add_argument('--fineSizeW', type=int, default=512, help='Fine size width')
    parser.add_argument('--fineSizeH', type=int, default=256, help='Fine size height')
    parser.add_argument('--crop_mode', type=str, default='rectangle', help='Crop mode')
    parser.add_argument('--which_model_netG', type=str, default='resnet_6blocks', help='Generator model')
    parser.add_argument('--no_dropout', action='store_true', help='Disable dropout')
    parser.add_argument('--pool_size', type=int, default=0, help='Pool size')
    parser.add_argument('--lambda_spa_unsup_A', type=int, default=10, help='Lambda spa unsupervised A')
    parser.add_argument('--lambda_spa_unsup_B', type=int, default=10, help='Lambda spa unsupervised B')
    parser.add_argument('--lambda_unsup_cycle_A', type=int, default=10, help='Lambda unsupervised cycle A')
    parser.add_argument('--lambda_unsup_cycle_B', type=int, default=10, help='Lambda unsupervised cycle B')
    parser.add_argument('--lambda_cycle_A', type=int, default=0, help='Lambda cycle A')
    parser.add_argument('--lambda_cycle_B', type=int, default=0, help='Lambda cycle B')
    parser.add_argument('--lambda_content_A', type=int, default=1, help='Lambda content A')
    parser.add_argument('--lambda_content_B', type=int, default=1, help='Lambda content B')
    parser.add_argument('--batchSize', type=int, default=1, help='Batch size')
    parser.add_argument('--noise_level', type=float, default=0.001, help='Noise level')
    parser.add_argument('--niter_decay', type=int, default=0, help='Number of iterations for decay')
    parser.add_argument('--niter', type=int, default=2, help='Number of iterations')
    return parser.parse_args()
